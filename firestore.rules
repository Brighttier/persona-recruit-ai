
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function hasRole(role) {
      return isAuthenticated() && request.auth.token.role == role;
    }
    
    function belongsToCompany(companyId) {
        return isAuthenticated() && request.auth.token.companyId == companyId;
    }

    // Users can read their own data, admins can read all
    match /users/{userId} {
      allow read: if isUser(userId) || hasRole('super_admin') || hasRole('company_admin');
      allow update: if isUser(userId);
      allow create: if !exists(/databases/$(database)/documents/users/$(request.resource.data.id));
      allow list: if hasRole('super_admin') || hasRole('company_admin');
    }

    // Candidate profiles can be written by owner, read by recruiters/admins
    match /candidateProfiles/{userId} {
        allow read, write: if isUser(userId);
        allow read: if hasRole('recruiter') || hasRole('company_admin') || hasRole('super_admin');
    }
    
    // Interviewer profiles
    match /interviewerProfiles/{userId} {
        allow read, write: if isUser(userId);
        allow read: if hasRole('company_admin') || hasRole('super_admin');
    }

    // Companies can be read by anyone, written by company admins or super admins
    match /companies/{companyId} {
      allow read: if isAuthenticated();
      allow create, write: if hasRole('super_admin') || belongsToCompany(companyId);
    }
    
    // Company invitations
    match /companyInvitations/{invitationId} {
        allow read: if isAuthenticated();
        allow create, write: if hasRole('company_admin') || hasRole('super_admin');
    }

    // Jobs can be read by anyone, written by recruiters/admins of that company
    match /jobs/{jobId} {
      allow read: if true;
      allow create: if hasRole('recruiter') || hasRole('company_admin');
      allow update, delete: if hasRole('recruiter') || hasRole('company_admin') || hasRole('super_admin');
    }
    
    // Vector embedding collections are admin-only for writes
    match /candidates_with_embeddings/{candidateId} {
        allow read, write: if hasRole('super_admin'); // Or a trusted server role
    }
    
    match /jobs_with_embeddings/{jobId} {
        allow read, write: if hasRole('super_admin'); // Or a trusted server role
    }

    // Applications can be created by candidates, and read/written by company staff
    match /jobApplications/{applicationId} {
      allow create: if hasRole('candidate');
      allow read, update: if isUser(request.resource.data.candidateId) || 
                            belongsToCompany(request.resource.data.companyId) || 
                            hasRole('super_admin');
    }

    // Interviews can be managed by company staff and viewed by participants
    match /interviews/{interviewId} {
      allow create: if hasRole('recruiter') || hasRole('company_admin');
      allow read, update: if isUser(request.resource.data.candidateId) || 
                             isUser(request.resource.data.interviewerId) ||
                             belongsToCompany(request.resource.data.companyId) || 
                             hasRole('super_admin');
    }
    
    // Deny all other access by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
