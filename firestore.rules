rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function hasRole(role) {
      return isAuthenticated() && request.auth.token != null && request.auth.token.role == role;
    }

    function isCompanyMember(companyId) {
        return isAuthenticated() && request.auth.token != null && request.auth.token.companyId == companyId;
    }

    function isRecruiterForCompany(companyId) {
        return isCompanyMember(companyId) && hasRole('recruiter');
    }

    function isCompanyAdmin(companyId) {
        return isCompanyMember(companyId) && hasRole('company_admin');
    }
    
    function isOwnerOrAdmin(userId) {
        return isUser(userId) || hasRole('super_admin');
    }

    // --- Collections ---

    // Users can read/write their own data. Super admins can manage all users.
    // Company admins can read users in their company.
    match /users/{userId} {
      allow read, update: if isOwnerOrAdmin(userId);
      allow create: if !isAuthenticated() || hasRole('super_admin'); // Public signup or admin creation
      allow list: if hasRole('super_admin') || hasRole('company_admin');
      // Company admin can view users of their company
      allow get: if isCompanyAdmin(get(/databases/$(database)/documents/users/$(userId)).data.companyId);
    }

    // Candidate profiles: users can manage their own. Recruiters/admins can read.
    match /candidateProfiles/{userId} {
        allow read, write: if isUser(userId);
        allow read: if hasRole('recruiter') || hasRole('company_admin') || hasRole('super_admin');
    }

    // Interviewer profiles
    match /interviewerProfiles/{userId} {
        allow read: if isAuthenticated();
        allow write: if isUser(userId) || isCompanyAdmin(resource.data.companyId);
    }
    
    // Companies collection
    match /companies/{companyId} {
      allow read: if isAuthenticated();
      allow create: if hasRole('super_admin');
      allow update: if hasRole('super_admin') || isCompanyAdmin(companyId);
    }
    
    // Company invitations
    match /companyInvitations/{invitationId} {
      allow read: if isCompanyMember(resource.data.companyId) || hasRole('super_admin');
      allow create: if isCompanyAdmin(request.resource.data.companyId);
      allow update: if isAuthenticated(); // For accepting invitation
    }

    // Jobs collection: public read. Write access for recruiters/admins of the company.
    match /jobs/{jobId} {
      allow read: if isAuthenticated();
      allow create, update: if isRecruiterForCompany(request.resource.data.companyId) || isCompanyAdmin(request.resource.data.companyId) || hasRole('super_admin');
    }
    
    // Job Applications collection
    match /jobApplications/{applicationId} {
      allow create: if isUser(request.resource.data.candidateId);
      allow read: if isUser(resource.data.candidateId) || isRecruiterForCompany(resource.data.companyId) || isCompanyAdmin(resource.data.companyId) || hasRole('super_admin');
      allow update: if isRecruiterForCompany(resource.data.companyId) || isCompanyAdmin(resource.data.companyId) || hasRole('super_admin');
    }
    
    // Interviews collection
    match /interviews/{interviewId} {
      allow read: if isUser(resource.data.candidateId) || isUser(resource.data.interviewerId) || isRecruiterForCompany(resource.data.companyId) || isCompanyAdmin(resource.data.companyId) || hasRole('super_admin');
      allow create, update: if isRecruiterForCompany(request.resource.data.companyId) || isCompanyAdmin(request.resource.data.companyId) || hasRole('super_admin');
    }
    
    // --- Embedding collections: should only be accessed by backend/admins ---
    match /candidates_with_embeddings/{candidateId} {
        allow read, write: if hasRole('super_admin') || hasRole('company_admin') || hasRole('recruiter');
    }

    match /jobs_with_embeddings/{jobId} {
        allow read, write: if hasRole('super_admin') || hasRole('company_admin') || hasRole('recruiter');
    }

  }
}
