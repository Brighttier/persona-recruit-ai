
"use client";

import { useState } from 'react';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import * as z from 'zod';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Container } from '@/components/shared/Container';
import { generateJobDescription, GenerateJobDescriptionInput } from '@/ai/flows/job-description-generator';
import { useToast } from '@/hooks/use-toast';
import { Wand2, Loader2, CheckCircle, PlusCircle } from 'lucide-react';

const jobFormSchema = z.object({
  jobTitle: z.string().min(3, { message: "Job title must be at least 3 characters." }),
  jobLevel: z.string().min(1, { message: "Please select a job level." }),
  department: z.string().min(2, { message: "Department must be at least 2 characters." }),
  location: z.string().min(2, { message: "Location must be at least 2 characters." }),
  responsibilities: z.string().min(20, { message: "Responsibilities must be at least 20 characters." }).describe("List key responsibilities, one per line or comma-separated."),
  qualifications: z.string().min(20, { message: "Qualifications must be at least 20 characters." }).describe("List key qualifications, one per line or comma-separated."),
});

type JobFormValues = z.infer<typeof jobFormSchema>;

export default function NewJobPage() {
  const [isAiLoading, setIsAiLoading] = useState(false);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [generatedDescription, setGeneratedDescription] = useState<string | null>(null);
  const { toast } = useToast();

  const form = useForm<JobFormValues>({
    resolver: zodResolver(jobFormSchema),
    defaultValues: {
      jobTitle: '',
      jobLevel: '',
      department: '',
      location: '',
      responsibilities: '',
      qualifications: '',
    },
  });

  const handleGenerateDescription = async () => {
    const values = form.getValues();
    // Trigger validation for all fields defined in the schema before calling AI
    const validationResult = await form.trigger(); 
    if (!validationResult) {
      toast({
        variant: "destructive",
        title: "Validation Error",
        description: "Please fill in all required fields accurately before generating the description.",
      });
      return;
    }

    setIsAiLoading(true);
    setGeneratedDescription(null); // Clear previous generation
    try {
      const input: GenerateJobDescriptionInput = {
        jobTitle: values.jobTitle,
        jobLevel: values.jobLevel,
        department: values.department,
        location: values.location,
        responsibilities: values.responsibilities,
        qualifications: values.qualifications,
      };
      const result = await generateJobDescription(input);
      setGeneratedDescription(result.jobDescription);
      toast({
        title: "Success!",
        description: "Job description generated by AI. Review and edit if needed.",
        action: <CheckCircle className="text-green-500" />,
      });
    } catch (error) {
      console.error("Error generating job description:", error);
      toast({
        variant: "destructive",
        title: "AI Generation Error",
        description: "Failed to generate job description. Please check your input or try again later.",
      });
    } finally {
      setIsAiLoading(false);
    }
  };
  
  async function onSubmit(data: JobFormValues) {
    setIsSubmitting(true);
    // In a real app, you would submit this data (and the generatedDescription if available and preferred) to your backend
    console.log("Form submitted:", data);
    if (generatedDescription) {
      console.log("Using AI Generated description for submission:", generatedDescription);
      // Potentially, you'd send 'generatedDescription' instead of/in addition to 'data.responsibilities' and 'data.qualifications'
    }
    
    await new Promise(resolve => setTimeout(resolve, 1500)); // Simulate API call

    toast({
      title: "Job Posted!",
      description: `The job "${data.jobTitle}" has been successfully submitted.`,
      action: <PlusCircle className="text-primary" />,
    });
    form.reset();
    setGeneratedDescription(null);
    setIsSubmitting(false);
  }


  return (
    <Container>
      <Card className="max-w-3xl mx-auto shadow-xl">
        <CardHeader>
          <CardTitle className="text-3xl font-headline">Create New Job Posting</CardTitle>
          <CardDescription>
            Fill in the details below. You can also use our AI to help generate a compelling job description.
          </CardDescription>
        </CardHeader>
        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)}>
            <CardContent className="space-y-6">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <FormField
                  control={form.control}
                  name="jobTitle"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Job Title</FormLabel>
                      <FormControl>
                        <Input placeholder="e.g., Senior Software Engineer" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <FormField
                  control={form.control}
                  name="jobLevel"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Job Level</FormLabel>
                      <Select onValueChange={field.onChange} defaultValue={field.value}>
                        <FormControl>
                          <SelectTrigger>
                            <SelectValue placeholder="Select job level" />
                          </SelectTrigger>
                        </FormControl>
                        <SelectContent>
                          <SelectItem value="Entry-Level">Entry-Level</SelectItem>
                          <SelectItem value="Mid-Level">Mid-Level</SelectItem>
                          <SelectItem value="Senior-Level">Senior-Level</SelectItem>
                          <SelectItem value="Lead/Manager">Lead/Manager</SelectItem>
                          <SelectItem value="Executive">Executive</SelectItem>
                          <SelectItem value="Internship">Internship</SelectItem>
                        </SelectContent>
                      </Select>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <FormField
                  control={form.control}
                  name="department"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Department</FormLabel>
                      <FormControl>
                        <Input placeholder="e.g., Engineering, Marketing" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <FormField
                  control={form.control}
                  name="location"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Location</FormLabel>
                      <FormControl>
                        <Input placeholder="e.g., San Francisco, CA or Remote" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>

              <FormField
                control={form.control}
                name="responsibilities"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Key Responsibilities</FormLabel>
                    <FormControl>
                      <Textarea
                        placeholder="Enter key responsibilities, one per line or comma-separated..."
                        className="min-h-[120px]"
                        {...field}
                      />
                    </FormControl>
                    <FormDescription>
                      Provide a clear list of the main tasks and duties for this role. AI will use this to elaborate.
                    </FormDescription>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name="qualifications"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Qualifications & Skills</FormLabel>
                    <FormControl>
                      <Textarea
                        placeholder="Enter required qualifications and skills, one per line or comma-separated..."
                        className="min-h-[120px]"
                        {...field}
                      />
                    </FormControl>
                    <FormDescription>
                      List essential skills, experience, and education needed. AI will use this to elaborate.
                    </FormDescription>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <div className="space-y-2 pt-4 border-t">
                 <Label className="text-lg font-semibold">AI-Powered Job Description</Label>
                <Button type="button" variant="outline" onClick={handleGenerateDescription} disabled={isAiLoading || isSubmitting} className="w-full md:w-auto">
                  {isAiLoading ? (
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  ) : (
                    <Wand2 className="mr-2 h-4 w-4" />
                  )}
                  Generate with AI
                </Button>
                {generatedDescription && (
                  <Card className="mt-4 bg-muted/50">
                    <CardHeader>
                      <CardTitle className="text-md font-semibold">AI Generated Description Preview</CardTitle>
                       <CardDescription>Review and edit this description. The final job post will use this text if you proceed with it.</CardDescription>
                    </CardHeader>
                    <CardContent>
                      <Textarea
                        value={generatedDescription}
                        onChange={(e) => setGeneratedDescription(e.target.value)} // Allow editing
                        className="min-h-[250px] bg-background prose prose-sm max-w-none"
                        aria-label="AI Generated Job Description"
                      />
                      <p className="text-xs text-muted-foreground mt-2">
                        You can copy this description or edit it directly. When you "Post Job", this edited version will be considered if present.
                      </p>
                    </CardContent>
                  </Card>
                )}
              </div>
            </CardContent>
            <CardFooter className="flex justify-end pt-6">
              <Button type="submit" disabled={isSubmitting || isAiLoading} size="lg">
                {isSubmitting ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : <PlusCircle className="mr-2 h-4 w-4" />}
                Post Job
              </Button>
            </CardFooter>
          </form>
        </Form>
      </Card>
    </Container>
  );
}

