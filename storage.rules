rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {
    
    // Helper function to check for role in custom claims
    function hasRole(role) {
      return request.auth != null && request.auth.token != null && request.auth.token.role == role;
    }
    
    // Helper function to check if user is a member of a company
    function isCompanyMember(companyId) {
      return request.auth != null && request.auth.token != null && request.auth.token.companyId == companyId;
    }
    
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null && request.auth.uid != null;
    }
    
    // Helper function to check if user owns the resource
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }
    
    // Helper function to check if user can access candidate data
    function canAccessCandidateData() {
      return request.auth != null && (hasRole('super_admin') || hasRole('company_admin') || hasRole('recruiter') || hasRole('interviewer'));
    }
    
    // Helper function to validate file types for resumes
    function isValidResumeFile() {
      return request.resource.contentType.matches('application/pdf') ||
             request.resource.contentType.matches('application/msword') ||
             request.resource.contentType.matches('application/vnd.openxmlformats-officedocument.wordprocessingml.document');
    }
    
    // Helper function to validate file types for videos
    function isValidVideoFile() {
      return request.resource.contentType.matches('video/.*');
    }
    
    // Helper function to validate file types for images
    function isValidImageFile() {
      return request.resource.contentType.matches('image/.*');
    }

    // AVATARS: Publicly readable, but only the user can write their own.
    match /avatars/{userId}/{allPaths=**} {
      allow read: if true;
      allow write: if isOwner(userId) && 
                      request.resource.size < 5 * 1024 * 1024 && 
                      isValidImageFile();
    }

    // CANDIDATE RESUMES: Only readable/writable by owner and relevant company staff.
    match /candidates/{userId}/resume/{allPaths=**} {
      allow read: if isOwner(userId) || canAccessCandidateData();
      // File size limit: 10MB for resumes, must be valid resume file type
      allow write: if isOwner(userId) && 
                      request.resource.size < 10 * 1024 * 1024 && 
                      isValidResumeFile();
    }
    
    // CANDIDATE DOCUMENTS: General document uploads for candidates
    match /candidates/{userId}/documents/{allPaths=**} {
      allow read: if isOwner(userId) || canAccessCandidateData();
      // File size limit: 10MB for documents, must be valid document file type
      allow write: if isOwner(userId) && 
                      request.resource.size < 10 * 1024 * 1024 && 
                      (isValidResumeFile() || isValidImageFile());
    }
    
    // VIDEO INTRODUCTIONS: Same rules as resumes.
    match /videos/intro/{userId}/{allPaths=**} {
      allow read: if isOwner(userId) || canAccessCandidateData();
      // File size limit: 100MB for video introductions, must be valid video file
      allow write: if isOwner(userId) && 
                      request.resource.size < 100 * 1024 * 1024 && 
                      isValidVideoFile();
    }
    
    // INTERVIEW VIDEOS: For recorded interview sessions
    match /videos/interview/{userId}/{allPaths=**} {
      allow read: if isOwner(userId) || canAccessCandidateData();
      // File size limit: 500MB for interview videos, must be valid video file
      allow write: if isOwner(userId) && 
                      request.resource.size < 500 * 1024 * 1024 && 
                      isValidVideoFile();
    }
    
    // TESTIMONIAL VIDEOS: For candidate testimonials
    match /videos/testimonial/{userId}/{allPaths=**} {
      allow read: if isOwner(userId) || canAccessCandidateData();
      // File size limit: 100MB for testimonial videos, must be valid video file
      allow write: if isOwner(userId) && 
                      request.resource.size < 100 * 1024 * 1024 && 
                      isValidVideoFile();
    }
    
    // VIDEO THUMBNAILS: Generated thumbnails for videos
    match /videos/thumbnails/{userId}/{allPaths=**} {
      allow read: if isAuthenticated();
      allow write: if isOwner(userId) && 
                      request.resource.size < 5 * 1024 * 1024 && 
                      isValidImageFile();
      // System can also write thumbnails (for AI-generated thumbnails)
      allow write: if hasRole('super_admin') && isValidImageFile();
    }
    
    // COMPANY LOGOS: Publicly readable, writable by company admins.
    match /company-logos/{companyId}/{allPaths=**} {
      allow read: if true;
      allow write: if request.auth != null && isCompanyMember(companyId) && hasRole('company_admin');
    }
    
    // JOB ATTACHMENTS: Readable by authenticated users, writable by company staff.
    match /job-attachments/{jobId}/{allPaths=**} {
      allow read: if request.auth != null;
      // Write access would require checking job ownership via Firestore.
      // This is complex. We will allow any authenticated company member to write for now.
      allow write: if request.auth != null && (hasRole('recruiter') || hasRole('company_admin'));
    }
    
    // SUPPORT ATTACHMENTS: Writable by authenticated users.
    match /support-attachments/{userId}/{allPaths=**} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
        // Admins should also have access.
        allow read, write: if request.auth != null && hasRole('super_admin');
    }
    
    // TEMP: Writable by authenticated users with a size limit.
    match /temp/{userId}/{allPaths=**} {
      allow write: if request.auth != null && request.auth.uid == userId && request.resource.size < 10 * 1024 * 1024; // 10MB limit
      allow read: if request.auth != null && request.auth.uid == userId;
    }
    
    // PROFILE PICTURES: Publicly readable, user writable
    match /profile-pictures/{userId}/{allPaths=**} {
      allow read: if true;
      allow write: if isOwner(userId) && 
                      request.resource.size < 5 * 1024 * 1024 && 
                      isValidImageFile();
    }
    
    // INTERVIEW ATTACHMENTS: For files shared during interviews
    match /interview-attachments/{interviewId}/{allPaths=**} {
      allow read: if request.auth != null && (hasRole('super_admin') || hasRole('company_admin') || hasRole('recruiter') || hasRole('interviewer') || hasRole('candidate'));
      allow write: if request.auth != null && (hasRole('super_admin') || hasRole('company_admin') || hasRole('recruiter') || hasRole('interviewer'));
      // File size limit: 20MB for interview attachments
      allow write: if request.auth != null && request.resource.size < 20 * 1024 * 1024;
    }
    
    // ANALYTICS DATA: For storing analytics files (read-only for most users)
    match /analytics/{allPaths=**} {
      allow read: if request.auth != null && (hasRole('super_admin') || hasRole('company_admin'));
      allow write: if request.auth != null && hasRole('super_admin');
    }

    // Default deny all other paths
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}
